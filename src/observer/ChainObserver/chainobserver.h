/*
clsquare - closed loop simulation system
Copyright (c) 2010-2012 Machine Learning Lab, 
Prof. Dr. Martin Riedmiller, University of Freiburg

Author: Thomas Lampe

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are
met:

   * Redistributions of source code must retain the above copyright
     notice, this list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright
     notice, this list of conditions and the following disclaimer in
     the documentation and/or other materials provided with the
     distribution.
   * Neither the name of the <ORGANIZATION> nor the names of its
     contributors may be used to endorse or promote products derived
     from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
DAMAGE. 
*/

#ifndef _CHAIN_OBSERVER_H_
#define _CHAIN_OBSERVER_H_

#include "observer.h"
#include <vector>

/** ChainObserver sub-observer specification.
  **/
struct ChainObserverSlave
{
  int mdim, odim;
  double *prev;
  char *name, *chapter;
  Observer *base;
};

/** Meta-class for combining multiple observer types.
  * Sub-observers are specified by entries of the form \b observer_x <em>= <type>
  * <chapter></em>, where \e x is a continous index starting at 0, \e <type> is
  * a valid class inherited from Observer, and \e chapter is the configuration
  * section where the sub-controller's parameters are specified. If \e <chapter>
  * is not specified, the section \e [Controller_x] is used.
  *
  * Sub-observers will be called in the order of their index, and later modules
  * will receive the observation of their predecessor as input measurement, meaning
  * that observations may be further modified if needed, but also that later
  * observers may not have access to the original plant observation if parts
  * are removed or changed earlier along the execution chain.
  *
  * An additional parameter \b verbose can be set to \e true to activate output
  * of the plant measurement and the composite observation generated by the
  * sub controllers in order to ensure proper operation.
  *
  * @author Thomas Lampe
  * @ingroup OBSERVER */
class ChainObserver : public Observer {
  public:
    ChainObserver () {};
    ~ChainObserver () {};
    bool init (const int plant_state_dim, const int measurement_dim, const int action_dim, int &observed_state_dim, const char *fname=0, const char *chapter=0);
    void get_observed_state (const double *prev_measurement, const double* prev_action, const double *current_measurement, const int cycle_ctr, double *observed_state);
    void notify_episode_starts ();
    void notify_episode_stops ();
    void deinit ();

  protected:
    int _i, _k, _meas_dim, _obs_dim;
    double *_mbuf, *_obuf;
    std::vector<ChainObserverSlave> _chain;
    bool _verb;
};

#endif
