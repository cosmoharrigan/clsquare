/*
clsquare - closed loop simulation system
Copyright (c) 2010-2012 Machine Learning Lab, 
Prof. Dr. Martin Riedmiller, University of Freiburg

Author: Thomas Lampe

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are
met:

   * Redistributions of source code must retain the above copyright
     notice, this list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright
     notice, this list of conditions and the following disclaimer in
     the documentation and/or other materials provided with the
     distribution.
   * Neither the name of the <ORGANIZATION> nor the names of its
     contributors may be used to endorse or promote products derived
     from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
DAMAGE. 
*/

#ifndef _ARITHMETIC_OBSERVER_H_
#define _ARITHMETIC_OBSERVER_H_

#include "observer.h"
#include <vector>
#include <string>
#include <iostream>

/** Utility class for ArithmeticObserver that represents an operand. */
class ArobsOperand {
  public:
    ArobsOperand () {_ob=false; _nm=0.;};
    ArobsOperand (const char* desc, const int dim) {set(desc, dim);};
    inline double eval (const double* state) {return _ob ? state[int(_nm)] : _nm;};
    void set (const char* desc, const int dim);
    bool _ob;
    double _nm;
};

/** Utility class for ArithMeticObserver that represents an operator/operand pair. */
class ArobsOperation {
  public:
    ArobsOperation () {_op='+';};
    ArobsOperation (const char oper, const char* desc, const int dim) {_op=oper; _nm.set(desc, dim);};
    double eval (const double base, const double* state);
    void print (std::ostream& o) {o << _op << " " << (_nm._ob?"$":"") << _nm._nm << " ";};
  protected:
    ArobsOperand _nm;
    char _op;
};

/** Observer class that performs simple arithmetic operations on the plant measurement.
  * Calculations are specified by config entries of the form \b operation_x, with \e x
  * being a continuous index starting at 0. Each operation is a simple mathematic formula,
  * with operators and operands being separated by spaces. The result of each operation
  * is appended to the end of the observation vector.
  *
  * To use data from some plant measurement index \e i, the expression \e $i can be used
  * in a formula. For instance, <em>$0 * 2</em> would add twice the value of the first
  * measurement element to the observation. Formulas may also reference elements of the
  * observation that were generated by another formula of lower index.
  *
  * Formulas are evaluated greedily, i.e. without operator precedence; for instance, the
  * expression <em>1 + 2 * 3</em> would be resolved to \e 9, not to \e 7. Preference
  * can be simulated by first computing the inner expression in a separate operation, and
  * later discarding the temporary results using a ShuffleObserver.
  *
  * @author Thomas Lampe
  * @ingroup OBSERVER */
class ArithmeticObserver : public Observer {
  public:
    ArithmeticObserver () {};
    ~ArithmeticObserver () {};
    bool init (const int plant_state_dim, const int measurement_dim, const int action_dim, int &observed_state_dim, const char *fname=0, const char *chapter=0);
    void get_observed_state (const double *prev_measurement, const double* prev_action, const double *current_measurement, const int cycle_ctr, double *observed_state);
  protected:
    int _i, _k, _mdim, _odim;
    std::vector< std::vector<ArobsOperation> > _ops;
};

#endif
